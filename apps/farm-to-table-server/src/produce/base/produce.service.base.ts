/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Produce as PrismaProduce,
  Farmer as PrismaFarmer,
} from "@prisma/client";

export class ProduceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProduceCountArgs, "select">): Promise<number> {
    return this.prisma.produce.count(args);
  }

  async produces(args: Prisma.ProduceFindManyArgs): Promise<PrismaProduce[]> {
    return this.prisma.produce.findMany(args);
  }
  async produce(
    args: Prisma.ProduceFindUniqueArgs
  ): Promise<PrismaProduce | null> {
    return this.prisma.produce.findUnique(args);
  }
  async createProduce(args: Prisma.ProduceCreateArgs): Promise<PrismaProduce> {
    return this.prisma.produce.create(args);
  }
  async updateProduce(args: Prisma.ProduceUpdateArgs): Promise<PrismaProduce> {
    return this.prisma.produce.update(args);
  }
  async deleteProduce(args: Prisma.ProduceDeleteArgs): Promise<PrismaProduce> {
    return this.prisma.produce.delete(args);
  }

  async getFarmer(parentId: string): Promise<PrismaFarmer | null> {
    return this.prisma.produce
      .findUnique({
        where: { id: parentId },
      })
      .farmer();
  }
}
